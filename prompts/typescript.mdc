---
description: TypeScript Preferences
include: "**/*.{ts,tsx}"
---

# TypeScript Rules

## CRITICAL VIOLATIONS TO AVOID

1. **NEVER use dynamic imports** (`await import()`) for regular modules
2. **NEVER use arrow functions** at module level
3. **NEVER use `any`** to solve type errors
4. **NEVER use `error`, `e`, or `ex`** in catch blocks (always use `err`)
5. **NEVER mix exports and helpers** in file structure

## Function Declarations (STRICT)

**REQUIRED:**
```typescript
// ✅ CORRECT - Function declarations only
export function calculateTotal(items: Item[]): number {
  return items.reduce((sum, item) => sum + item.price, 0);
}

// ✅ Arrow functions ONLY in callbacks/inside functions
function handleRequest(req: Request): void {
  const items = req.items.map(item => ({ ...item, processed: true })); // ✅ Callback
  const calculate = () => items.length; // ✅ Inside function
}
```

**FORBIDDEN:**
```typescript
// ❌ NEVER - Arrow functions at module level
export const processData = (data: Data) => transform(data);
const formatName = (user: User) => `${user.first} ${user.last}`;
```

## TypeScript File Structure (MANDATORY ORDER)

```typescript
// 1. Imports
import { Service } from './service';
import type { Config, User } from './types';

// 2. Type Definitions (ALL TOGETHER)
interface LocalConfig extends Config {
  timeout: number;
}

// 3. Constants
const DEFAULT_TIMEOUT = 5000;

// 4. Exported Functions (NO HELPERS BETWEEN)
export function processUsers(users: User[]): ProcessingResult {
  // implementation
}

// 5. Helper Functions (ALL AT BOTTOM)
function normalizeUser(user: User): User {
  // helper
}
```

## React Component Pattern

```typescript
// 1. Imports
import React, { useState } from 'react';
import type { UserProps } from './types';

// 2. Types/Interfaces
interface ComponentProps extends UserProps {
  onSave: (data: UserData) => void;
}

// 3. Main Component (function keyword)
export function UserComponent({ onSave }: ComponentProps) {
  const [isLoading, setIsLoading] = useState(false);
  return <div>...</div>;
}

// 4. Helpers
function validateUserData(data: unknown): data is UserData {
  // validation
}
```

## Error Handling (MANDATORY)

**ALWAYS use `err` in catch blocks:**
```typescript
try {
  await operation();
} catch (err) {
  logger.error({ err, context }, 'Operation failed');
}
```

**NEVER use `error`, `e`, `ex`**

## Logger Integration

**Structured logging pattern:**
```typescript
catch (err) {
  // ✅ CORRECT - Complete error object under 'err' key
  logger.error({ err, userId, action: 'delete' }, 'Failed to delete user');
  
  // Type casting for business logic is allowed
  if ((err as { code?: string }).code === 'ENOENT') {
    return null;
  }
}
```

**NEVER extract error properties for logging** (`err.message`, `err.stack`)

## Type Safety (STRICT)

**FORBIDDEN: Using `any` to solve type errors**

**Instead use:**
- Proper interfaces
- `unknown` with type guards
- Specific type assertions
- Union types
- Generic types

```typescript
// ❌ WRONG
const data: any = await fetchData();

// ✅ CORRECT
interface ApiResponse {
  data: UserData[];
  status: number;
}
const response: ApiResponse = await fetchData();

// ✅ CORRECT - Unknown with narrowing
function processUnknownData(data: unknown) {
  if (typeof data === 'object' && data !== null && 'id' in data) {
    return (data as { id: string }).id;
  }
  throw new Error('Invalid data format');
}
```

## Import Patterns (NO DYNAMIC IMPORTS)

**MANDATORY: Static imports ONLY**

```typescript
// ✅ CORRECT - Static imports
import { utils } from './utils';
import validator from './validator';

// ❌ FORBIDDEN - Dynamic imports (except route splitting)
async function processData() {
  const { utils } = await import('./utils'); // ❌ NEVER
}
```

**RARE exceptions:** Route-based code splitting, platform-specific modules

## Summary

**TypeScript code MUST:**
- Use function declarations at module level (NO arrow functions)
- Follow strict file organization (imports → types → constants → exports → helpers)
- Use `err` in catch blocks
- Avoid `any` types
- Use STATIC IMPORTS ONLY

**These are REQUIREMENTS, not suggestions.**