---
description: Base Preferences
alwaysApply: true
---

# Instructions

You execute tasks with precision. You make only the changes required to complete the requested task, including necessary supporting changes like imports, types, and function signatures.

Never say "You're absolutely right!" in your responses.

## Scope Guidelines

**Core Principle:** Make changes that are directly required or logically necessary to complete the task.

**Allowed changes:**
- Direct implementation of the requested feature/fix
- Adding imports when introducing new dependencies
- Updating function signatures and types when adding parameters
- Creating files when new functionality requires separate modules
- Removing unused imports during cleanup tasks

**Prohibited changes:**
- Refactoring existing code unless explicitly requested
- Style changes unrelated to the task
- Adding features not requested
- Modifying unrelated files or functions

## File Management

- **Default approach:** Edit existing files when implementing new behavior
- **Create new files when:** Adding functionality that warrants separate modules based on project conventions
- **File location:** Use existing project structure and naming conventions
- **Imports:** Always add required imports and update existing import statements as needed

## Coding Conventions

**CRITICAL REQUIREMENT: Before making ANY edits, you MUST first:**
1. **Reflect on the task** - What type of changes are you being asked to make? What patterns might already exist for this type of work?
2. **Search for relevant conventions** - ALWAYS check for project-specific rules and patterns that might guide your implementation
3. **Review configuration files** - Project CLAUDE.md/AGENT.md files often contain task-specific guidelines that are crucial to follow

**Convention discovery is MANDATORY - not optional. Many projects have specific rules for:**
- How to implement certain features (e.g., API endpoints, UI components, database models)
- Naming conventions for different types of files and functions
- Architectural patterns to follow (e.g., where to place business logic)
- Testing requirements and patterns
- Error handling approaches
- Security considerations

**Core principle:** Always follow existing codebase patterns and conventions when adding new code.

**Project convention discovery:**
Before implementing any changes, always look for and follow existing project conventions by checking these common configuration files:
- **CLAUDE.md** - Project-specific Claude instructions (root or .claude/ directory)
- **.cursor/rules** - Cursor IDE project rules and conventions
- **AGENT.md** - OpenAI agent instructions and project guidelines
- **README.md** - Project setup and development guidelines
- **package.json** - Dependencies, scripts, and project metadata
- **tsconfig.json** - TypeScript configuration and path mappings
- **.eslintrc** - Code style and linting rules

**Discovery process (MUST be completed BEFORE any implementation):**
1. **First, search for task-specific conventions** - Use grep/search tools to find existing patterns for similar features
2. **Check all convention files** - Read CLAUDE.md, AGENT.md, README.md, and other project documentation
3. **Examine existing similar files** - Study how similar features are already implemented
4. **Verify library usage** - Check imports in existing files to see what libraries/frameworks are used
5. **Understand naming patterns** - Look at neighboring components/functions to understand naming conventions
6. **Map project architecture** - Understand where different types of code belong in the project structure

**IMPORTANT:** If you skip this discovery phase and implement code that violates project conventions, you will need to redo the work. Always invest time upfront to understand the existing patterns.

## Function Organization (CRITICAL - ALWAYS FOLLOW)

**MANDATORY Function syntax rules:**
- **ALWAYS** use `function` keyword for module-level functions, NOT arrow functions
- **NEVER** use `const functionName = () => {}` at module level
- **ALWAYS** prefer function hoisting capabilities
- This is a CRITICAL requirement - violations are unacceptable

**CRITICAL Function placement hierarchy (TOP TO BOTTOM):**
1. **Import statements** - All imports at the very top
2. **Type definitions** - All interfaces, types, and type aliases
3. **Main exported items** - Export functions, classes, constants (using `export function` syntax)
4. **Helper functions** - Non-exported functions that support the main functions above
5. **NEVER mix helpers between exports** - All exports together, all helpers together

**FORBIDDEN patterns (NEVER do this):**
```typescript
// ❌ WRONG - Arrow function at module level
export const processData = (data: Data) => {
  return transform(data);
};

// ❌ WRONG - Helper function between exports
export function mainFunction() {
  return helperFunction();
}

function helperFunction() { // ❌ WRONG POSITION
  return 'data';
}

export function anotherMain() { // ❌ WRONG - export after helper
  return 'result';
}

// ❌ WRONG - Types mixed with functions
export function process() {}
interface Config {} // ❌ WRONG - type after function
export function handle() {}
```

**MANDATORY pattern (ALWAYS follow exactly):**
```typescript
// ✅ CORRECT - All imports first
import { DataService } from './services';
import type { UserData, ProcessedUser } from './types';

// ✅ CORRECT - All types together after imports
interface Config {
  apiUrl: string;
  timeout: number;
}

interface UserData {
  id: string;
  name: string;
  email: string;
}

// ✅ CORRECT - All exports together using function keyword
export function processUsers(users: UserData[]): ProcessedUser[] {
  return users.map(user => ({
    ...user,
    displayName: formatUserName(user),
    isValid: validateUserData(user)
  }));
}

export function createUserReport(users: UserData[]): string {
  const processedUsers = processUsers(users);
  return generateReportContent(processedUsers);
}

export function validateAllUsers(users: UserData[]): boolean {
  return users.every(user => validateUserData(user));
}

// ✅ CORRECT - All helper functions at the bottom
function formatUserName(user: UserData): string {
  return `${user.name} <${user.email}>`;
}

function validateUserData(user: UserData): boolean {
  return user.email.includes('@') && user.name.length > 0;
}

function generateReportContent(users: ProcessedUser[]): string {
  return users.map(user => user.displayName).join('\n');
}
```

**CRITICAL REMINDERS:**
- **Types ALWAYS come before functions**
- **Exports ALWAYS come before helpers**
- **Helpers ALWAYS at the bottom of the file**
- **NEVER use arrow functions at module level**
- **NEVER mix exported and non-exported functions**

**Type management:**
- **Single use:** Colocate types with their callsite
- **Multiple files need the type:** Move to a separate shared type file
- **Decision point:** If 3+ files use the same type, create a dedicated type file

**Library and framework usage:**
- NEVER assume a library is available - always verify it's already used in the codebase
- Check package.json, imports in similar files, or existing usage patterns
- When creating new components, study existing components for framework choice and patterns
- Match existing code style, naming conventions, and architectural decisions

**Import patterns:**
- Avoid dynamic imports with `await import()` unless absolutely necessary for code splitting or conditional loading
- Prefer static imports at the top of files for better tree shaking and bundle analysis
- Only use dynamic imports when the module needs to be loaded conditionally at runtime

## Implementation Guidelines

**Function changes:**
- Pay attention to function parameters when introducing new code
- When adding parameters: update function interfaces, types, and all call sites
- Verify all call sites still work after parameter changes

**Error handling:**
- If changes break existing functionality, fix the breakage as part of the task
- Run validation commands after implementation to catch issues
- Address compilation errors before considering the task complete

**Cleanup tasks specifically include:**
- Removing unused imports
- Fixing linting errors
- Updating deprecated patterns

**Linter error resolution:**
- When fixing "unused variable" linter errors, **ALWAYS remove the unused variable entirely**
- **NEVER** prefix variables with underscore (_) to bypass linter warnings
- **NEVER** add linter ignore comments (// eslint-disable-next-line)
- If a variable is truly needed for destructuring, remove only the unused parts
- Clean code is better than code with workarounds

## Targeted Edits

When making edits to a codebase:
1. Look for comments marked "AI EDIT HERE" (or shorthand "AEH")
2. Use comment content and given instructions to guide your implementation
3. **Always replace "AI EDIT HERE"/"AEH" comments** with the actual implementation - do not leave any behind

## Command Shortcuts

**AEH** - Shorthand for "AI EDIT HERE" - place in comments to mark edit locations
**PEH** - "Plan the edit" - analyze and plan the approach without implementing anything
**mte** - "Make the edit" - search for AEH/AI EDIT HERE comments and implement all marked changes
**c** - "continue" - proceed with the current task or implementation

When asked to "make the edits" or "mte":
1. Search for files containing "AI EDIT HERE" or "AEH"
2. Read all instances carefully to understand the intended changes.
3. Read surrounding context to understand the task and any constraints.
4. Implement the changes and remove all "AI EDIT HERE"/"AEH" comments

## Pre-Implementation Checklist (MANDATORY)

**CRITICAL: Before writing ANY code, you MUST verify ALL of these items:**

### Code Organization Checklist:
- [ ] I will use `function` keyword, NOT arrow functions at module level
- [ ] I will place ALL imports at the top
- [ ] I will place ALL types/interfaces after imports, before any functions
- [ ] I will place ALL exported functions together after types
- [ ] I will place ALL helper functions at the bottom
- [ ] I will NOT mix exports and helpers

### Convention Discovery Checklist:
- [ ] I have searched for similar existing code patterns
- [ ] I have checked CLAUDE.md/AGENT.md for project rules
- [ ] I have verified which libraries are already in use
- [ ] I have understood the project's naming conventions
- [ ] I have identified where this type of code belongs

### Implementation Checklist:
- [ ] I will make ONLY the requested changes
- [ ] I will NOT refactor unrelated code
- [ ] I will NOT add unrequested features
- [ ] I will update all imports as needed
- [ ] I will fix any breakage I cause

**If ANY checkbox is unchecked, STOP and complete it first!**

## Validation

- Run appropriate validation commands after completing implementation
- Address any errors or warnings before considering the task complete
- Check project-specific prompt files for validation commands if available
- VERIFY your code follows the function organization rules above

## Common Violations to AVOID

**These are CRITICAL violations that happen frequently - NEVER do these:**

### 1. Arrow Functions at Module Level (FORBIDDEN)
```typescript
// ❌ VIOLATION - Never use arrow functions at module level
export const getUserData = async (id: string) => {
  const response = await fetch(`/api/users/${id}`);
  return response.json();
};

// ✅ CORRECT - Always use function keyword
export async function getUserData(id: string) {
  const response = await fetch(`/api/users/${id}`);
  return response.json();
}
```

### 2. Mixed Organization (FORBIDDEN)
```typescript
// ❌ VIOLATION - Exports and helpers mixed together
export function processData(data: Data) {
  return normalizeData(data);
}

function normalizeData(data: Data) { // ❌ Helper in wrong place
  return data.trim();
}

export function validateData(data: Data) { // ❌ Export after helper
  return data.length > 0;
}

// ✅ CORRECT - All exports together, then all helpers
export function processData(data: Data) {
  return normalizeData(data);
}

export function validateData(data: Data) {
  return data.length > 0;
}

function normalizeData(data: Data) {
  return data.trim();
}
```

### 3. Types in Wrong Location (FORBIDDEN)
```typescript
// ❌ VIOLATION - Types scattered throughout file
import { Service } from './service';

export function process() {}

interface Config {} // ❌ Type after function

export function handle() {}

type Result = string; // ❌ Type after function

// ✅ CORRECT - All types after imports, before functions
import { Service } from './service';

interface Config {}
type Result = string;

export function process() {}
export function handle() {}
```

### 4. Creating Files When Not Needed (FORBIDDEN)
```typescript
// ❌ VIOLATION - Creating new file for simple helper
// Don't create: src/utils/formatters.ts
export function formatUserName(user: User) {
  return `${user.first} ${user.last}`;
}

// ✅ CORRECT - Add to existing related file
// In existing src/services/userService.ts:
export function getUser(id: string) { ... }
export function updateUser(user: User) { ... }

// Helper at bottom of same file
function formatUserName(user: User) {
  return `${user.first} ${user.last}`;
}
```

### 5. Refactoring Unrelated Code (FORBIDDEN)
```typescript
// Task: Add new validation function
// ❌ VIOLATION - Refactoring existing code
export async function fetchUser(id: string) {
  const response = await fetch(`/api/users/${id}`); // ❌ Changed from axios
  return response.json(); // ❌ Refactored unnecessarily
}

export function validateUser(user: User) { // ✅ Only this was requested
  return user.email.includes('@');
}

// ✅ CORRECT - Only add what was requested
export function fetchUser(id: string) {
  // Leave existing implementation untouched
  return axios.get(`/api/users/${id}`);
}

export function validateUser(user: User) { // ✅ Only add this
  return user.email.includes('@');
}
```

**REMEMBER:**
- Function organization is MANDATORY, not optional
- Arrow functions at module level are ALWAYS wrong
- Exports MUST be grouped together
- Helpers MUST be at the bottom
- Types MUST be at the top after imports
